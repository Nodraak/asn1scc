
group a_variables;

rtlModuleName() ::= "adaasn1rtl"

PrintIntValue(nValue) ::= "<nValue>"

PrintRealValue(dValue)	::= "<dValue>"

PrintStringValue(sValue, arrsNullChars)	::= "\"<sValue>\"<if(arrsNullChars)> & <arrsNullChars; wrap, anchor, separator=\" & \"><endif>"


PrintStringValueNull()	::= "<rtlModuleName()>.NUL"

PrintStringValueChar(sValue)	::= "'<sValue>'"


PrintRefValue1(sValue)	::= "<sValue>"
PrintRefValue2(sModName,sValue)	::= "<sModName>.<sValue>"


PrintEnumValue(sValue)	::= "<sValue>"

PrintRefValue_lengthOf(sValue)	::= "Integer(<sValue>)"

PrintCharValue(cValue)	::= "'<cValue>'"

PrintBooleanValue(bValue)	::= "<if(bValue)>TRUE<else>FALSE<endif>"

PrintNullValue()	::= "0"

PrintOctetStringValue(td/*:FE_SizeableTypeDefinition*/,bIsFixedSize, arruBytes, nCount) ::= <<
<td.typeName>'(<if(!bIsFixedSize)>Length => <nCount>,<endif>Data => <td.array>'(<if(arruBytes)><arruBytes:{b|<i>=>16#<b;format="X2">#}; wrap, anchor, separator=", ">,<endif> others=> 16#0#)) 
>>

PrintBitOrOctetStringValueAsCompoundLitteral(td/*:FE_SizeableTypeDefinition*/, bIsFixedSize, arruBytes, nCount) ::= <<
<PrintOctetStringValue(td=td, bIsFixedSize=bIsFixedSize, arruBytes=arruBytes, nCount=nCount)>
>>

PrintOctetArrayAsCompoundLitteral(arruBytes) ::= <<
<rtlModuleName()>.OctetBuffer'(<arruBytes:{b|<i>=>16#<b;format="X2">#}; wrap, anchor, separator=", ">)
>>

PrintBitArrayAsCompoundLitteral(arruBits) ::= <<
<rtlModuleName()>.BitArray'(<arruBits:{b|<i>=>16#<b;format="X2">#}; wrap, anchor, separator=", ">)
>>

PrintBitStringValue(td/*:FE_SizeableTypeDefinition*/,bIsFixedSize, arrsBits, nCount) ::= <<
<td.typeName>'(<if(!bIsFixedSize)>Length => <nCount>,<endif>Data => <td.array>'(<if(arrsBits)><arrsBits:{b|<i>=><b>}; wrap, anchor, separator=", ">,<endif> others=> 0)) 
>>


PrintObjectIdentifierValue(td/*:FE_PrimitiveTypeDefinition*/, arrnValues, nCount) ::= <<
<td.typeName>'(Length => <nCount>, values => <rtlModuleName()>.ObjectIdentifier_array'(<if(arrnValues)><arrnValues; wrap, anchor, separator=", ">,<endif> others=> 0)) 
>>

PrintObjectIdentifierValueAsCompoundLiteral(arrnValues, nCount) ::= <<
<rtlModuleName()>.Asn1ObjectIdentifier'(Length => <nCount>, values => <rtlModuleName()>.ObjectIdentifier_array'(<if(arrnValues)><arrnValues; wrap, anchor, separator=", ">,<endif> others=> 0)) 
>>


PrintSequenceValueChild(sName, sInnerValue) ::= "<sName> => <sInnerValue>"
PrintSequenceValue_child_exists(sName, sExistsBit) ::= "<sName> => <sExistsBit>"
PrintSequenceValue_Exists(td/*:FE_SequenceTypeDefinition*/, arrsOptionalPresentFields) ::="Exist => <td.exist>'(<arrsOptionalPresentFields; wrap, anchor,  separator=\",\">)"

PrintSequenceValue(sTasName,arrsChildren) ::= <<
<sTasName>'(
    <if(arrsChildren)><arrsChildren; separator=",\n"><else>null record<endif>
    )
>>


PrintChoiceValue(sTasName, sChildName, sChildVal, sChildNamePresent) ::= <<
<sTasName>'(kind => <sChildNamePresent>, <sChildName> => <sChildVal>)
>>

//FUNCTION MyChoice_a1_set(itm:<rtlModuleName()>.Asn1Int) RETURN MyChoice;
PrintChoiceValue_setters(sTasName, sChildName, sChildVal) ::= <<
<sTasName>_<sChildName>_set(<sChildVal>)
>>

PrintSequenceOfValue(td/*:FE_SizeableTypeDefinition*/, bIsFixedSize, nLength, arrsInnerValues, sDefValue) ::= <<
<td.typeName>'(<if(!bIsFixedSize)>Length => <nLength>,<endif>Data => <td.array>'(<if(arrsInnerValues)><arrsInnerValues:{b|<i>=><b>}; wrap, anchor, separator=", ">,<endif> others => <sDefValue>))
>>



