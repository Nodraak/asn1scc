group a_isvalid;

rtlModuleName() ::= "adaasn1rtl"


always_true_statement ()::= <<
ret := <rtlModuleName()>.ASN1_RESULT'(Success => true, ErrorCode => 0);
>>

always_false_statement (sErrorCodeName)::= <<
ret := <rtlModuleName()>.ASN1_RESULT'(Success => false, ErrorCode => <sErrorCodeName>);
>>



JoinTwoIfFirstOk(sStr1,sStr2) ::=<<
<sStr1>
if ret.Success then
    <sStr2>
end if;
>>

ExpEqual(sExp1, sExp2) ::= "(<sExp1> = <sExp2>)"
ExpStringEqual(sExp1, sExp2) ::= "(<sExp1> = <sExp2>)"
ExpGt(sExp1, sExp2) ::= "(<sExp1> \> <sExp2>)"
ExpGte(sExp1, sExp2) ::= "(<sExp1> \>= <sExp2>)"
ExpLt(sExp1, sExp2) ::= "(<sExp1> \< <sExp2>)"
ExpLte(sExp1, sExp2) ::= "(<sExp1> \<= <sExp2>)"
ExpOr(sExp1, sExp2) ::= "((<sExp1>) OR (<sExp2>))"
ExpAnd(sExp1, sExp2) ::= "(<sExp1> AND <sExp2>)"
ExpAndMulit(arrsExp) ::= <<
<arrsExp; separator=" AND ">
>>
ExpNot(sExp) ::= "(NOT <sExp>)"
StrLen(sExp) ::= "<rtlModuleName()>.getStringSize(<sExp>)"
ArrayLen(sExp, sAcc) ::= "<sExp><sAcc>Length"





EmitTypeAssignment_primitive_def(sVarName, sStar, sFuncName, sTypeDefName, sErrCode, nErrValue) ::= <<
<sErrCode>:CONSTANT INTEGER := <nErrValue>; -- 
FUNCTION <sFuncName>(<sVarName> : in <sTypeDefName>) return <rtlModuleName()>.ASN1_RESULT;
>>

EmitTypeAssignment_primitive(sVarName, sStar, sFuncName, sTypeDefName, sContent, arrsAlphaFuncs) ::= <<
<arrsAlphaFuncs; separator="\n">
FUNCTION <sFuncName>(<sVarName> : in <sTypeDefName>) return <rtlModuleName()>.ASN1_RESULT
IS
    ret : <rtlModuleName()>.ASN1_RESULT;
BEGIN
    <sContent>
    RETURN ret;
END <sFuncName>;
>>

EmitTypeAssignment_composite_def_err_code(sErrCode, nErrValue) ::= <<
<sErrCode>:CONSTANT INTEGER := <nErrValue>; 
>>

EmitTypeAssignment_composite_def(sFuncName, sTypeDefName, arrsErrcodes) ::= <<
<arrsErrcodes; separator="\n">
FUNCTION <sFuncName>(val : in <sTypeDefName>) return <rtlModuleName()>.ASN1_RESULT;
>>

EmitTypeAssignment_composite(sFuncName, sTypeDefName, sContent, arrsAlphaFuncs, arrsLocalVars) ::= <<
<arrsAlphaFuncs; separator="\n">
FUNCTION <sFuncName>(val : in <sTypeDefName>) return <rtlModuleName()>.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : <rtlModuleName()>.ASN1_RESULT := <rtlModuleName()>.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
    <arrsLocalVars; separator="\n">
BEGIN
    <sContent>
    RETURN ret;
END <sFuncName>;
>>



Print_AlphabetCheckFunc_str() ::= "str(I)"

Print_AlphabetCheckFunc(sFuncName, arrsAlphaConBody) ::= <<
FUNCTION <sFuncName>(str : in String) return boolean 
  with
      pre =\> STR'First=1 AND STR'Last\>=STR'First AND STR'Last\<=INTEGER'LAST-1
IS
    ret:BOOLEAN:=true;
    I:INTEGER:=1;
    strLen :constant Integer := <rtlModuleName()>.getStringSize(str);
BEGIN
    WHILE I\<= strLen and ret LOOP
        pragma Loop_Invariant (I>=1 AND I\<=str'Last);
        ret := ret AND <arrsAlphaConBody; separator=" AND ">;
        I := I + 1;
    END LOOP;
    return ret;
END <sFuncName>;
>>




PrintMultipleConstraints(arrsConstraints) ::= "<arrsConstraints; separator=\" AND \">"

callAlphaFunc(sFuncName, p) ::= "<sFuncName>_CharsAreValid(<p>)"

getStringSize(p) ::= "<rtlModuleName()>.getStringSize(<p>)"

getSizeableSize(p) ::= "<p>.Length"

stringContainsChar(sStrVal, p) ::= "<rtlModuleName()>.stringContainsChar(<sStrVal>, <p>)"

PrintReference1(p, sName) ::= "<sName>_IsConstraintValid(<p>)"

PrintReference2(p, sModName,sName) ::= "<sModName>.<sName>_IsConstraintValid(<p>)"

call_base_type_func(p, sFuncName) ::= "ret := <sFuncName>(<p>);"
call_base_type_func_exp(p, sFuncName) ::= "<sFuncName>(<p>).Success"


SingleValContraint(p, v) ::= "(<p> = <v>)"

RangeContraint(p, v1, v2, bMin, bMax) ::= "(<v1> \<<if(bMin)>=<endif> <p> AND <p> \<<if(bMax)>=<endif> <v2>)"

RangeContraint_val_MAX(p, v, bMin) ::= "<p> ><if(bMin)>=<endif> <v>"

RangeContraint_MIN_val(p, v, bMax) ::= "<p> \<<if(bMax)>=<endif> <v>"

AND_Constraint(sCon1, sCon2) ::= "(<sCon1> AND <sCon2>)"

OR_Constraint(sCon1, sCon2) ::= "(<sCon1> OR <sCon2>)"

AllExceptConstraint(sCon)  ::= "(NOT (<sCon>))"

ExceptConstraint(sCon1,sCon2) ::= "(<sCon1> AND NOT (<sCon2>))"


Emit_local_variable_SQF_Index(nI, bHasInitalValue)::="I<nI>:Integer<if(bHasInitalValue)>:=1<endif>;"




Emit_type(arrsConstraints, sErrCodeName) ::= <<
ret := <rtlModuleName()>.ASN1_RESULT'(Success => <if(arrsConstraints)><arrsConstraints; separator=" AND "><else>TRUE<endif>, ErrorCode => <sErrCodeName>);
>>

Emit_Reference1(p, sName) ::= "ret := <sName>_IsConstraintValid(<p>);"

Emit_Reference2(p, sModName,sName) ::= "ret := <sModName>.<sName>_IsConstraintValid(<p>);"

/* SEQUENCE OF start*/



sequenceOf(p,sAcc, i, bIsFixedSize, nFixedSize, soIsValidSizeExp, soErrCode, soInnerStatement) ::= <<
<if(!bIsFixedSize)>
ret := <rtlModuleName()>.ASN1_RESULT'(Success => <soIsValidSizeExp>, ErrorCode => <soErrCode>);

<endif>
<if (soInnerStatement)>
<i> := <p>.Data'First;
while ret.Success and <i> \<= <if(bIsFixedSize)><nFixedSize><else><p>.Length<endif> loop
    pragma Loop_Invariant (<i> \>= <p>.Data'First and <i> \<= <if(bIsFixedSize)><nFixedSize><else><p>.Length<endif>);
    <soInnerStatement>
    <i> := <i>+1;
end loop;

<endif>
>>

/* SEQUENCE OF end*/


/* SEQUENCE start*/

Sequence_optional_child_always_present_or_absent(p, sAcc,  sChName, sErrCode, sPresOrAbs) ::= <<
ret:= <rtlModuleName()>.ASN1_RESULT'(Success => <p>.Exist.<sChName>=<sPresOrAbs>, ErrorCode => <sErrCode>);
>>

Sequence_OptionalChild(p, sAcc, sChName, sInnerStatement) ::= <<
if <p>.Exist.<sChName> = 1 then
    <sInnerStatement>
end if;
>>

JoinItems(sPart, soNestedPart) ::= <<
<sPart>
<if(soNestedPart)>
if ret.Success then
    <soNestedPart>
end if;

<endif>
>>



Emit_sequence_optional_component(sParentPath, sName, sChildBody) ::=<<
IF <sParentPath>.Exist.<sName>=1 THEN
    <sChildBody>
END IF;
>>




/* SEQUENCE end*/

/*CHOICE start*/


choice_child(sChPresent, sChildBody, bAlwaysAbsent) ::= <<
WHEN <sChPresent> =>
    <sChildBody>
>>

choice(p, sAccess, arrsChildren, sErrCodeForInvalidCase) ::= <<
case <p>.kind is
    <arrsChildren; separator="\n">
end case;
>>

/*CHOICE end */